from aiogram import Bot, Dispatcher
from aiogram.types import BotCommand
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv
import os
from handlers import user_handlers, callback_handler
from services.data_base import connect_db, close_db
import signal
import datetime


load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")


async def shutdown(bot: Bot):
    await bot.session.close()
    close_db()
    print("üîª –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")


async def set_commands(bot: Bot):
    commands = [
        BotCommand(
            command="/start",
            description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(
            command="/generate_congrat",
            description="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ"),
        BotCommand(
            command="/information",
            description="–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"),
        BotCommand(
            command="/favourite",
            description="–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è"),
        BotCommand(
            command="/subscription",
            description="–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"),
        BotCommand(
            command="/promocode",
            description="–í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥")
    ]
    await bot.set_my_commands(commands)


async def main():
    global bot
    bot = Bot(token=BOT_TOKEN)
    dp = Dispatcher(storage=MemoryStorage())
    before_conn = datetime.datetime.now()
    connect_db()
    after_conn = datetime.datetime.now()
    print(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏–ª–æ—Å—å {after_conn - before_conn}")

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤
    dp.include_router(user_handlers.router)
    dp.include_router(callback_handler.router)

    await set_commands(bot)

    try:
        await dp.start_polling(bot)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {e}")
    finally:
        await shutdown(bot)


def run():
    loop = asyncio.get_event_loop()

    for sig in (signal.SIGINT, signal.SIGTERM):
        loop.add_signal_handler(sig,
                                lambda: asyncio.ensure_future(shutdown(bot)))

    try:
        loop.run_until_complete(main())
    finally:
        loop.close()


if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
