from datetime import datetime, timedelta, timezone
import json
from aiogram import Router, types, F
from keyboards import inline
from aiogram.fsm.context import FSMContext
from bot_states import form_states
from services import data_base, AI_API
from dotenv import load_dotenv
import os
import asyncio
from services import logging


log_action = logging.log_action

# data dicts
events_dict = {
    "birthday": "–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è",
    "anniversary": "–ì–æ–¥–æ–≤—â–∏–Ω–∞",
    "achievement": "–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ",
    "holiday": "–ü—Ä–∞–∑–¥–Ω–∏–∫",
    "personal": "–õ–∏—á–Ω–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ",
    "joke": "–†–æ–∑—ã–≥—Ä—ã—à"
}
reciever_role_dict = {
    "mom": "–ú–∞–º–∞",
    "dad": "–ü–∞–ø–∞",
    "grandma": "–ë–∞–±—É—à–∫–∞",
    "grandpa": "–î–µ–¥—É—à–∫–∞",
    "sister": "–°–µ—Å—Ç—Ä–∞",
    "brother": "–ë—Ä–∞—Ç",
    "daughter": "–î–æ—á—å",
    "son": "–°—ã–Ω",
    "wife": "–ñ–µ–Ω–∞",
    "husband": "–ú—É–∂",
    "girlfriend": "–î–µ–≤—É—à–∫–∞",
    "boyfriend": "–ü–∞—Ä–µ–Ω—å",
    "friend_boy": "–î—Ä—É–≥",
    "friend_girl": "–ü–æ–¥—Ä—É–≥–∞",
    "colleague": "–ö–æ–ª–ª–µ–≥–∞ –ø–æ —Ä–∞–±–æ—Ç–µ",
    "boss": "–ù–∞—á–∞–ª—å–Ω–∏–∫ –Ω–∞ —Ä–∞–±–æ—Ç–µ",
    "teacher": "–£—á–∏—Ç–µ–ª—å/–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å",
    "AI": "–ò—Å–∫—É—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–µ–∫—Ç",
    "unknown": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
}
style_dict = {
    "spiritual": "–î—É—à–µ–≤–Ω—ã–π",
    "friendly": "–î—Ä—É–∂–µ—Å–∫–∏–π",
    "official": "–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π"
}

TARIFFS = {
    "buy_basic": {
        "label": "üíé –ë–∞–∑–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞",
        "description": "100 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –Ω–∞ 30 –¥–Ω–µ–π.",
        "amount": 9900,  # –∫–æ–ø–µ–µ–∫ = 49‚ÇΩ
        "days": 30,
        "tokens": 100,
        "payload": "basic_sub",
    },
    "buy_pro": {
        "label": "üöÄ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –ø–æ–¥–ø–∏—Å–∫–∞",
        "description": "250 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –Ω–∞ 30 –¥–Ω–µ–π.",
        "amount": 14900,  # 99‚ÇΩ
        "days": 30,
        "tokens": 250,
        "payload": "pro_sub",
    },
    "buy_yearly": {
        "label": "üëë –ì–æ–¥–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞",
        "description": "750 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –Ω–∞ 365 –¥–Ω–µ–π.",
        "amount": 24900,  # 249‚ÇΩ
        "days": 365,
        "tokens": 750,
        "payload": "yearly_sub",
    }
}

load_dotenv()
PROVIDER_TOKEN = os.getenv("PROVIDER_TOKEN")

router = Router()


def check_sub(user_id: int):
    user_info = data_base.get_info(user_id)
    if user_info["available_tokens"] == 0:
        if user_info["sub_type"] == "free_sub":
            return {
                "allow_generate": False,
                "message": (
                    "–ü–æ—Ö–æ–∂–µ, —É –≤–∞—Å –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. "
                    "–í—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∏ –ø–æ–ª—É—á–∏—Ç—å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤. "
                )
            }
        else:
            return {
                "allow_generate": False,
                "message": (
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –Ω–∞ —Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω."
                )
            }
    else:
        return {
            "allow_generate": True,
            "message": ""
        }


@router.callback_query(F.data == "generate_congrat")
async def generate_congrat(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    user_id = callback.from_user.id
    log_action(user_id, "callback:generate_congrat")
    sub_data = check_sub(user_id)
    if not sub_data["allow_generate"]:
        await callback.message.answer(sub_data["message"], reply_markup=inline.see_sub_plans_btn())
    else:
        allowing_data = data_base.get_permition_by_last_request_time(callback.from_user.id)
        if allowing_data["status"] == "not allowed" and allowing_data["message"] == "request frequency exceeded":
            generation_frequency_exceeded_message = await callback.message.answer((
                "–ü—Ä–µ–≤—ã—à–µ–Ω–∞ —á–∞—Å—Ç–æ—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π. "
                "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ"
            ))
            await asyncio.sleep(5)
            await generation_frequency_exceeded_message.delete()
            await callback.answer()
            return
        print(f"{user_id}: generate_congrat")
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è",
            reply_markup=inline.congrat_type_btn()
        )

        data_base.set_last_request_time(callback.from_user.id)

        await state.set_state(form_states.Congrat.congrat_type)

    await callback.answer()


@router.callback_query(F.data == "generate_another")
async def generate_another(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    user_id = callback.from_user.id
    log_action(user_id, "callback:generate_another")
    print(f"{user_id}: generate_another")

    sub_data = check_sub(user_id)
    if not sub_data["allow_generate"]:
        await callback.message.answer(sub_data["message"], reply_markup=inline.see_sub_plans_btn())
    else:
        allowing_data = data_base.get_permition_by_last_request_time(callback.from_user.id)
        if allowing_data["status"] == "not allowed" and allowing_data["message"] == "request frequency exceeded":
            generation_frequency_exceeded_message = await callback.message.answer((
                "–ü—Ä–µ–≤—ã—à–µ–Ω–∞ —á–∞—Å—Ç–æ—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π. "
                "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ"
                ))
            await asyncio.sleep(5)
            await generation_frequency_exceeded_message.delete()
            await callback.answer()
            return
        await callback.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è",
            reply_markup=inline.congrat_type_btn()
        )

        await state.set_state(form_states.Congrat.congrat_type)

    await callback.answer()


@router.callback_query(F.data.contains("regenerate_current:"))
async def regenerate_current(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    user_info = data_base.get_info(user_id)
    log_action(user_id, "callback:regenerate_current")
    print(f"{user_id}: regenerate_current")

    sub_data = check_sub(user_id)
    if not sub_data["allow_generate"]:
        await callback.message.answer(sub_data["message"], reply_markup=inline.see_sub_plans_btn())
        await state.clear()
    else:
        allowing_data = data_base.get_permition_by_last_request_time(callback.from_user.id)
        if allowing_data["status"] == "not allowed" and allowing_data["message"] == "request frequency exceeded":
            generation_frequency_exceeded_message = await callback.message.answer((
                "–ü—Ä–µ–≤—ã—à–µ–Ω–∞ —á–∞—Å—Ç–æ—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π. "
                "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ"
                ))
            await asyncio.sleep(5)
            await generation_frequency_exceeded_message.delete()
            await callback.answer()
            return

        session_id = callback.data.split(":", 1)[1]
        answer_generation = await callback.message.edit_text("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è...")
        prompt = data_base.get_prompt_by_session_id(session_id)
        if user_info["sub_type"] == "free_sub":
            result = AI_API.generate_congrat_gpt_3_5(prompt=prompt, regenerate=True)
            if result["status"] == "error":
                log_action(user_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {result['error']}")
                await answer_generation.edit_text(
                    "–ö–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑\n–¢–æ–∫–µ–Ω—ã –Ω–µ —Å–ø–∏—Å–∞–Ω—ã",
                    reply_markup=inline.generate_congrat_btn()
                    )
                return
            prompt = result["prompt"]
            response = result["response"]
            session_id = result["session_id"]
            data_base.log_generation(callback.from_user.id, prompt, response, session_id, "gpt-3.5")
        else:
            result = AI_API.generate_congrat_gpt_4_1(prompt=prompt, regenerate=True)
            if result["status"] == "error":
                log_action(user_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {result['error']}")
                await answer_generation.edit_text(
                    "–ö–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑\n–¢–æ–∫–µ–Ω—ã –Ω–µ —Å–ø–∏—Å–∞–Ω—ã",
                    reply_markup=inline.generate_congrat_btn()
                    )
                return
            prompt = result["prompt"]
            response = result["response"]
            session_id = result["session_id"]
            data_base.log_generation(callback.from_user.id, prompt, response, session_id, "gpt-4.1")

        data_base.write_off_a_token(callback.from_user.id)
        await answer_generation.edit_text(response, reply_markup=inline.regenerate_btn(session_id))
        log_action(user_id, f"–ü–æ–ª—É—á–∏–ª –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ {session_id}")
        data_base.set_last_request_time(callback.from_user.id)
        gen_count = data_base.send_mess_after_first_second_gen(user_id)
        print(f"gen_count:{gen_count}")
        if gen_count == '1':
            await callback.message.answer(
                """
                üéâ –ì–æ—Ç–æ–≤–æ! –ù–∞–¥–µ—é—Å—å, –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å.\n
                –û—Å—Ç–∞–ª–æ—Å—å: 2 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.
                """)
        elif gen_count == '2':
            await callback.message.answer(
                """
                üéâ –ì–æ—Ç–æ–≤–æ! –ù–∞–¥–µ—é—Å—å, –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å.
                –û—Å—Ç–∞–ª–æ—Å—å: 1 –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è.
                """)
        elif gen_count == '3':
            await callback.message.answer(
                """
                ‚õî –ë–æ–ª—å—à–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –Ω–µ—Ç.
                –•–æ—á–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å? –í–æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã üëá
                """, reply_markup=inline.sub_plans_btn())

    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–∏–ø–∞ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è
@router.callback_query(F.data.in_({
    "birthday",
    "anniversary",
    "achievement",
    "holiday",
    "personal"
}))
async def congrat_type(callback: types.CallbackQuery, state: FSMContext):
    c_type = callback.data
    log_action(callback.from_user.id, f"–¢–∏–ø –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è: {events_dict[c_type]}")
    await state.update_data(congrat_type=c_type)

    await callback.message.edit_text(
                            f'–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è\n‚úÖ{events_dict[c_type]}'
                            )

    if c_type == "achievement":
        await callback.message.answer(
                            "–° –∫–∞–∫–∏–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ–º –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ–∑–¥—Ä–∞–≤–∏—Ç—å?"
                            )
        await state.set_state(form_states.Congrat.achieve)

    elif c_type == "holiday":
        await callback.message.answer(
                            "–° –∫–∞–∫–∏–º –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–º –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ–∑–¥—Ä–∞–≤–∏—Ç—å?"
                            )
        await state.set_state(form_states.Congrat.holiday)
    elif c_type == "anniversary":
        await callback.message.answer(
                            "–° –∫–∞–∫–æ–π –≥–æ–¥–æ–≤—â–∏–Ω–æ–π –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ–∑–¥—Ä–∞–≤–∏—Ç—å?"
                            )
        await state.set_state(form_states.Congrat.anniversary)
    else:
        await callback.message.answer(
                                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º—É –±—É–¥–µ—Ç –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ",
                                reply_markup=inline.congrat_recipient_role_btn()
                                )
        await state.set_state(form_states.Congrat.congrat_recipient_role)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è
@router.callback_query(F.data.in_({
    "mom",
    "dad",
    "grandma",
    "grandpa",
    "sister",
    "brother",
    "daughter",
    "son",
    "wife",
    "husband",
    "girlfriend",
    "boyfriend",
    "friend_boy",
    "friend_girl",
    "colleague",
    "boss",
    "teacher",
    "AI",
    "unknown"
}))
async def congrat_reciever_role(callback: types.CallbackQuery, state: FSMContext):
    role = callback.data
    log_action(callback.from_user.id, f"–†–æ–ª—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è: {reciever_role_dict[role]}")

    await state.update_data(congrat_recipient_role=role)
    await state.set_state(form_states.Congrat.congrat_style)

    await callback.message.edit_text(
                            f'–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º—É –±—É–¥–µ—Ç –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ\n‚úÖ{reciever_role_dict[role]}'
                            )

    await callback.message.answer(
                            "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è",
                            reply_markup=inline.congrat_style_btn()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å—Ç–∏–ª—è –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è
@router.callback_query(F.data.in_({
    "spiritual",
    "friendly",
    "official"
}))
async def congrat_style(callback: types.CallbackQuery, state: FSMContext):
    style = callback.data
    log_action(callback.from_user.id, f"–°—Ç–∏–ª—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è: {style_dict[style]}")
    await state.update_data(congrat_style=style)
    await state.set_state(form_states.Congrat.reciever_name)

    await callback.message.edit_text(
                            f"–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è\n‚úÖ{style_dict[style]}"
                            )

    await callback.message.answer(
                            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è('-' - –Ω–µ —É–∫–∞–∑—ã–≤–∞—Ç—å)"
    )


@router.callback_query(F.data == 'see_sub_plans')
async def see_sub_plans(callback: types.CallbackQuery, state: FSMContext):
    log_action(callback.from_user.id, "callback:see_sub_plans")
    await callback.message.answer("""
üéâ –•–æ—á–µ—à—å –±–æ–ª—å—à–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π –∏ –ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ?
–ü–æ–¥–ø–∏—à–∏—Å—å –∏ –ø–æ–ª—É—á–∏ –¥–æ—Å—Ç—É–ø –∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—è–º –Ω–∞ –±–∞–∑–µ GPT-4.1 ‚Äî –±–æ–ª–µ–µ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–π –∏ –¥—É—à–µ–≤–Ω–æ–π –º–æ–¥–µ–ª–∏!

üí° –ë–µ—Å–ø–ª–∞—Ç–Ω–æ
‚Äî 3 –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è
‚Äî –ù–∞ –±–∞–∑–µ GPT-3.5
‚Äî –û—Ç–ª–∏—á–Ω–æ, —á—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å

üíé –ë–∞–∑–æ–≤–∞—è ‚Äî 99‚ÇΩ / –º–µ—Å
‚Äî 100 –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π
‚Äî –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è GPT-4.1
‚Äî –î–ª—è —Ä–µ–¥–∫–∏—Ö, –Ω–æ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π

üöÄ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è ‚Äî 149‚ÇΩ / –º–µ—Å
‚Äî 250 –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π
‚Äî –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è GPT-4.1
‚Äî –î–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã—Ö –∏–¥–µ–π

üëë –ì–æ–¥–æ–≤–∞—è ‚Äî 249‚ÇΩ / –≥–æ–¥
‚Äî 750 –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π –Ω–∞ –≤–µ—Å—å –≥–æ–¥
‚Äî –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è GPT-4.1
‚Äî –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤—ã–≥–æ–¥–∞!

üìå –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è —Å—Ä–∞–∑—É. –ì–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ —Å–≥–æ—Ä–∞—é—Ç –¥–æ –∫–æ–Ω—Ü–∞ —Å—Ä–æ–∫–∞.
""", reply_markup=inline.sub_plans_btn())

    await callback.answer()


@router.callback_query(F.data.in_(TARIFFS.keys()))
async def handle_buy_subscription(callback: types.CallbackQuery):
    tariff = TARIFFS[callback.data]
    user_id = callback.from_user.id
    log_action(user_id, "handle_buy_sub")

    provider_data = {
        "receipt": {
            "items": [
                {
                    "description": tariff["label"],
                    "quantity": 1,
                    "amount": {
                        "value": tariff["amount"] / 100,  # –≤ —Ä—É–±–ª—è—Ö
                        "currency": "RUB"
                    },
                    "vat_code": 1,
                    "payment_mode": "full_payment",
                    "payment_subject": "commodity"
                }
            ],
            "tax_system_code": 1
        }
    }

    if data_base.get_info(user_id)["sub_type"] != "free_sub":
        additional_description = (
            "\n–í–Ω–∏–º–∞–Ω–∏–µ! –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞!\n"
            "–ü—Ä–∏ –æ–ø–ª–∞—Ç–µ –Ω–æ–≤–æ–π –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–Ω–∏ –∏ —Ç–æ–∫–µ–Ω—ã –±—É–¥—É—Ç —Å–±—Ä–æ—à–µ–Ω—ã\n")
    else:
        additional_description = ""

    prices = [types.LabeledPrice(label=tariff["label"], amount=tariff["amount"])]
    print((
        f"title:{tariff['label']}\n"
        f"description:{tariff['description'] + additional_description}"
        f"payload:{tariff['payload']}\n"
        f"provider_token:{PROVIDER_TOKEN}\n"
        "currency=RUB\n"
        f"prices:{prices}\n"
        f"start_parameter:{callback.data}\n"
    ))

    await callback.message.answer_invoice(
        title=tariff["label"],
        description=(tariff["description"] + additional_description)[:255],
        payload=tariff["payload"],
        provider_token=PROVIDER_TOKEN,
        currency="RUB",
        prices=prices,
        start_parameter=callback.data,
        need_email=True,
        send_email_to_provider=True,
        provider_data=json.dumps(provider_data)
    )
    await callback.answer()


@router.pre_checkout_query()
async def process_pre_checkout(pre_checkout_q: types.PreCheckoutQuery):
    await pre_checkout_q.answer(ok=True)


@router.message(F.successful_payment)
async def on_successful_payment(message: types.Message):
    payload = message.successful_payment.invoice_payload
    user_id = message.from_user.id
    log_action(user_id, f"success_payment:{payload}")

    # –ü–æ payload —É–∑–Ω–∞—ë–º, –∫–∞–∫–æ–π —Ç–∞—Ä–∏—Ñ –±—ã–ª –∫—É–ø–ª–µ–Ω
    for tariff in TARIFFS.values():
        if payload == tariff["payload"]:
            sub_expires = datetime.now(timezone.utc) + timedelta(days=tariff["days"])
            tokens = tariff["tokens"]

            # üîß –û–±–Ω–æ–≤–∏ –ë–î: –≤—ã—Å—Ç–∞–≤–∏ –ø–æ–¥–ø–∏—Å–∫—É, —Ç–æ–∫–µ–Ω—ã, —Å—Ä–æ–∫
            data_base.set_subscription(user_id, payload, tokens, sub_expires)
            # –¢—É—Ç –≤—Å—Ç–∞–≤—å —Å–≤–æ—é —Ñ—É–Ω–∫—Ü–∏—é:
            # update_subscription(user_id, tokens, sub_expires)

            await message.answer(
                f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ *{tariff['label']}* –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n"
                f"üí¨ –î–æ—Å—Ç—É–ø–Ω–æ: {tokens} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π\n"
                f"‚è≥ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {sub_expires.strftime('%d.%m.%Y')}",
                parse_mode="Markdown"
            )
            break

# –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è
# –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–∑–¥–Ω–∏–∫/–¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ (–ø—Ä–∏ –≤—ã–±—Ä–∞–Ω—ã—Ö –æ–ø—Ü–∏—è—Ö –ø—Ä–∞–∑–¥–Ω–∏–∫/–¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
# —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ)
# –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º—É –±—É–¥–µ—Ç –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ
# –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è
# –í—ã–±–µ—Ä–∏—Ç–µ –∏–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è("-" - –Ω–µ —É–∫–∞–∑—ã–≤–∞—Ç—å)
