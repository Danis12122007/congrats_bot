import asyncio
from aiogram import F, Router, types
from aiogram.filters import CommandStart, Command
from keyboards import inline
from aiogram.fsm.context import FSMContext
from bot_states import form_states
from services import data_base, AI_API
import datetime
from validators import validators


TARIFFS = {
    "buy_basic": {
        "label": "üíé –ë–∞–∑–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞",
        "description": "100 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –Ω–∞ 30 –¥–Ω–µ–π.",
        "amount": 4900,  # –∫–æ–ø–µ–µ–∫ = 49‚ÇΩ
        "days": 30,
        "tokens": 100,
        "payload": "basic_sub",
    },
    "buy_pro": {
        "label": "üöÄ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –ø–æ–¥–ø–∏—Å–∫–∞",
        "description": "250 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –Ω–∞ 30 –¥–Ω–µ–π.",
        "amount": 9900,  # 99‚ÇΩ
        "days": 30,
        "tokens": 250,
        "payload": "pro_sub",
    },
    "buy_yearly": {
        "label": "üëë –ì–æ–¥–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞",
        "description": "750 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –Ω–∞ 365 –¥–Ω–µ–π.",
        "amount": 24900,  # 249‚ÇΩ
        "days": 365,
        "tokens": 750,
        "payload": "yearly_sub",
    }
}


sub_types = {
    "free_sub": "–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞",
    "basic_sub": "üíé –ë–∞–∑–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞",
    "pro_sub": "üöÄ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –ø–æ–¥–ø–∏—Å–∫–∞",
    "yearly_sub": "üëë –ì–æ–¥–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞"
}


def check_sub(user_id: int):
    user_info = data_base.get_info(user_id)
    if user_info["available_tokens"] == 0:
        if user_info["sub_type"] == "free_sub":
            return {
                "allow_generate": False,
                "message": (
                    "–ü–æ—Ö–æ–∂–µ, —É –≤–∞—Å –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. "
                    "–í—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∏ –ø–æ–ª—É—á–∏—Ç—å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤. "
                )
            }
        else:
            return {
                "allow_generate": False,
                "message": (
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –Ω–∞ —Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω."
                )
            }
    else:
        return {
            "allow_generate": True,
            "message": ""
        }


router = Router()


@router.message(CommandStart())
async def cmd_start(message: types.Message):
    print(message.from_user.full_name)
    user_id = message.from_user.id
    data_base.reg_user(user_id)

    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è! –ü—Ä–æ—Å—Ç–æ –∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ!",
        reply_markup=inline.generate_congrat_btn())


@router.message(Command('generate_congrat'))
async def generate_congrat(message: types.Message, state: FSMContext):
    print(f"{message.from_user.id}: generate_congrat")
    await state.clear()
    user_id = message.from_user.id
    data_base.reg_user(user_id)

    sub_data = check_sub(user_id)
    if not sub_data["allow_generate"]:
        await message.answer(sub_data["message"], reply_markup=inline.see_sub_plans_btn())
    else:
        allowing_data = data_base.get_permition_by_last_request_time(message.from_user.id)
        if allowing_data["status"] == "not allowed" and allowing_data["message"] == "request frequency exceeded":
            generation_frequency_exceeded_message = await message.answer("–ü—Ä–µ–≤—ã—à–µ–Ω–∞ —á–∞—Å—Ç–æ—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ")
            await asyncio.sleep(5)
            await generation_frequency_exceeded_message.delete()
            await message.answer()
            return
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è",
            reply_markup=inline.congrat_type_btn()
        )

        await state.set_state(form_states.Congrat.congrat_type)


@router.message(Command('information'))
async def info(message: types.Message, state: FSMContext):
    await state.clear()
    user_id = message.from_user.id
    data_base.reg_user(user_id)

    info = data_base.get_info(user_id)

    info_user_id = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Ññ{info['user_id']}\n"
    info_reg_date = f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {info['reg_date'].date()}\n"
    info_subscription = f"–¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏: {sub_types[info['sub_type']]}\n"
    info_sub_expired = f"–ò—Å—Ç–µ–∫–∞–µ—Ç: {info['sub_expired'].date()}\n"
    info_available_tokens = f"–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {info['available_tokens']}"

    await message.answer(
        text="{}{}{}{}{}".format(
                                info_user_id,
                                info_reg_date,
                                info_subscription,
                                info_sub_expired,
                                info_available_tokens
                                )
    )


@router.message(Command("subscription"))
async def subscription(message: types.Message, state: FSMContext):
    await message.answer("""
üéâ –•–æ—á–µ—à—å –±–æ–ª—å—à–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π? –ü–æ–¥–ø–∏—à–∏—Å—å –∏ –ø–æ–ª—É—á–∏ –¥–æ—Å—Ç—É–ø –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è–º –±–µ–∑ –ª–∏—à–Ω–∏—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π:

üí° –ë–µ—Å–ø–ª–∞—Ç–Ω–æ:
‚Äî 5 –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π –≤ –º–µ—Å—è—Ü
‚Äî –•–æ—Ä–æ—à–æ, —á—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å

üíé –ë–∞–∑–æ–≤–∞—è ‚Äî 49‚ÇΩ / –º–µ—Å:
‚Äî 100 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
‚Äî –î–ª—è —Ä–µ–¥–∫–∏—Ö –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π

üöÄ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è ‚Äî 99‚ÇΩ / –º–µ—Å:
‚Äî 250 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
‚Äî –î–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

üëë –ì–æ–¥–æ–≤–∞—è ‚Äî 249‚ÇΩ / –≥–æ–¥:
‚Äî 750 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –Ω–∞ –≤–µ—Å—å –≥–æ–¥
‚Äî –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤—ã–≥–æ–¥–∞: –æ–¥–Ω–æ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—å—à–µ 35 –∫–æ–ø–µ–µ–∫!

–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è —Å—Ä–∞–∑—É. –ì–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ —Å–≥–æ—Ä–∞—é—Ç –¥–æ –∫–æ–Ω—Ü–∞ —Å—Ä–æ–∫–∞.
""", reply_markup=inline.sub_plans_btn())


@router.message(Command('promocode'))
async def promocode(message: types.Message, state: FSMContext):
    await state.clear()
    user_id = message.from_user.id
    data_base.reg_user(user_id)
    await state.set_state(form_states.Congrat.promocode)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥")


@router.message(F.text)
async def recipient_name(message: types.Message, state: FSMContext):
    message_text = message.text
    if "<script>" in message_text or any(x in message_text for x in ["<", ">", "{", "}"]):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã.")
        return
    if len(message_text) > 50:
        await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ(–±–æ–ª–µ–µ 50 —Å–∏–º–≤–æ–ª–æ–≤)")
        return
    if len(message_text.strip()) == 0:
        message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        return
    if validators.contains_bad_symbols(message.text):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ emoji, HTML-—Ç–µ–≥–∏ –∏–ª–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã.")
        return

    current_state = await state.get_state()

    if current_state == 'Congrat:reciever_name':
        if not message_text.replace(" ", "").isalpha():
            await message.answer("–ò–º—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã.")
            return
        allowing_data = data_base.get_permition_by_last_request_time(message.from_user.id)
        if allowing_data["status"] == "not allowed" and allowing_data["message"] == "request frequency exceeded":
            await message.answer("–ü—Ä–µ–≤—ã—à–µ–Ω–∞ —á–∞—Å—Ç–æ—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ")
            return
        answer_generation = await message.answer("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è...")
        await state.update_data(reciever_name=message.text)
        congrat_data = await state.get_data()
        print(f"{message.from_user.id}: {congrat_data}")
        result = AI_API.generate_congrat(congrat_data)
        if result["status"] == "error":
            await answer_generation.edit_text(
                "–ö–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑\n–¢–æ–∫–µ–Ω—ã –Ω–µ —Å–ø–∏—Å–∞–Ω—ã",
                reply_markup=inline.generate_congrat_btn()
                )
            return
        prompt = result["prompt"]
        response = result["response"]
        session_id = result["session_id"]
        data_base.log_generation(message.from_user.id, prompt, response, session_id)
        data_base.write_off_a_token(message.from_user.id)
        await answer_generation.edit_text(response, reply_markup=inline.regenerate_btn(session_id))
        data_base.set_last_request_time(message.from_user.id)
    elif current_state == 'Congrat:promocode':
        promo = message.text
        if promo in []:
            user_id = message.from_user.id
            data_base.set_subscription(user_id, "monthly")
            await message.answer("–ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–º–µ–Ω—ë–Ω")
            await state.clear()
        else:
            await message.answer("–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç")
            await state.clear()
    elif current_state == 'Congrat:achieve':
        await state.update_data(achieve=message.text)
        await state.set_state(form_states.Congrat.congrat_recipient_role)
        await message.answer(
                            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º—É –±—É–¥–µ—Ç –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ",
                            reply_markup=inline.congrat_recipient_role_btn()
        )
    elif current_state == 'Congrat:holiday':
        await state.update_data(holiday=message.text)
        await state.set_state(form_states.Congrat.congrat_recipient_role)
        await message.answer(
                            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º—É –±—É–¥–µ—Ç –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ",
                            reply_markup=inline.congrat_recipient_role_btn()
        )
    elif current_state == 'Congrat:anniversary':
        await state.update_data(anniversary=message.text)
        await state.set_state(form_states.Congrat.congrat_recipient_role)
        await message.answer(
                            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º—É –±—É–¥–µ—Ç –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ",
                            reply_markup=inline.congrat_recipient_role_btn()
        )
    elif message.text.startswith("/daily_stat") and validators.user_is_admin(message.from_user.id):
        user_id = message.from_user.id
        print(f"{user_id}:{str(message.text)[1:]}")
        await state.clear()
        try:
            date = message.text.split()[1]
        except IndexError:
            await message.answer("–ó–∞–ø—Ä–æ—Å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É /daily_stat –ì–ì–ì–ì-–ú–ú-–î–î")
            return
        if len(message.text.split()) != 2:
            await message.answer("–ó–∞–ø—Ä–æ—Å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É /daily_stat –ì–ì–ì–ì-–ú–ú-–î–î")
            return
        date = message.text.split()[1]
        if not validators.is_valid_date(date):
            await message.answer("–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –¥–∞—Ç–∞ –∏–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É /daily_stat –ì–ì–ì–ì-–ú–ú-–î–î")
            return
        date = date.split("-")
        date = datetime.date(int(date[0]), int(date[1]), int(date[2]))
        daily_info = data_base.get_daily_stat(date)
        await message.answer((
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {daily_info['gen_count']}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ–∏–∑–≤–µ–¥—à–∏—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏—é: {daily_info['users_gen_count']}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {daily_info['newcomers_count']}\n"
        ))
    elif message.text.startswith("/monthly_stat") and validators.user_is_admin(message.from_user.id):
        user_id = message.from_user.id
        print(f"{user_id}:{str(message.text)[1:]}")
        await state.clear()
        try:
            date = message.text.split()[1]
        except IndexError:
            await message.answer("–ó–∞–ø—Ä–æ—Å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É /monthly_stat –ì–ì–ì–ì-–ú–ú")
            return
        if len(message.text.split()) != 2:
            await message.answer("–ó–∞–ø—Ä–æ—Å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É /monthly_stat –ì–ì–ì–ì-–ú–ú")
            return
        date = message.text.split()[1]
        date = date + "-01"
        if not validators.is_valid_date(date):
            await message.answer("–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –¥–∞—Ç–∞ –∏–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É /monthly_stat –ì–ì–ì–ì-–ú–ú")
            return
        date = date.split("-")
        date = datetime.date(int(date[0]), int(date[1]), int(date[2]))
        monthly_info = data_base.get_monthly_stat(date)
        await message.answer((
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {monthly_info['gen_count']}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ–∏–∑–≤–µ–¥—à–∏—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏—é: {monthly_info['users_gen_count']}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {monthly_info['newcomers_count']}\n"
        ))
    else:
        await state.clear()
        await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –≤–Ω–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")
        user_id = message.from_user.id
        data_base.reg_user(user_id)
