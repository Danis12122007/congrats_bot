import asyncio
from aiogram import F, Router, types
from aiogram.filters import CommandStart, Command
from keyboards import inline
from aiogram.fsm.context import FSMContext
from bot_states import form_states
from services import data_base, AI_API, promotions, graphs
import datetime
from validators import validators
from services import logging


log_action = logging.log_action


TARIFFS = {
    "buy_basic": {
        "label": "üíé –ë–∞–∑–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞",
        "description": "100 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –Ω–∞ 30 –¥–Ω–µ–π.",
        "amount": 4900,  # –∫–æ–ø–µ–µ–∫ = 49‚ÇΩ
        "days": 30,
        "tokens": 100,
        "payload": "basic_sub",
    },
    "buy_pro": {
        "label": "üöÄ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –ø–æ–¥–ø–∏—Å–∫–∞",
        "description": "250 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –Ω–∞ 30 –¥–Ω–µ–π.",
        "amount": 9900,  # 99‚ÇΩ
        "days": 30,
        "tokens": 250,
        "payload": "pro_sub",
    },
    "buy_yearly": {
        "label": "üëë –ì–æ–¥–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞",
        "description": "750 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –Ω–∞ 365 –¥–Ω–µ–π.",
        "amount": 24900,  # 249‚ÇΩ
        "days": 365,
        "tokens": 750,
        "payload": "yearly_sub",
    }
}


sub_types = {
    "free_sub": "–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞",
    "basic_sub": "üíé –ë–∞–∑–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞",
    "pro_sub": "üöÄ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –ø–æ–¥–ø–∏—Å–∫–∞",
    "yearly_sub": "üëë –ì–æ–¥–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞"
}


def check_sub(user_id: int):
    user_info = data_base.get_info(user_id)
    if user_info["available_tokens"] == 0:
        if user_info["sub_type"] == "free_sub":
            return {
                "allow_generate": False,
                "message": (
                    "–ü–æ—Ö–æ–∂–µ, —É –≤–∞—Å –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. "
                    "–í—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∏ –ø–æ–ª—É—á–∏—Ç—å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤. "
                )
            }
        else:
            return {
                "allow_generate": False,
                "message": (
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –Ω–∞ —Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω."
                )
            }
    else:
        return {
            "allow_generate": True,
            "message": ""
        }


router = Router()


@router.message(CommandStart())
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    text = message.text

    # –ü—Ä–∏–º–µ—Ä: "/start reels" -> —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ –ø—Ä–æ–±–µ–ª—É
    parts = text.split()
    if len(parts) > 1:
        match parts[1]:
            case "reels":
                user_from = "reels"
    else:
        user_from = None

    log_action(user_id, "/start")
    data_base.reg_user(user_id, user_from)

    await message.answer(
        """
üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ø–æ–∑–¥—Ä–∞–≤–ª—è—Ç–æ—Ä.
–ù–∞–ø–∏—à—É –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –º–∞–º—ã, –ø–æ–¥—Ä—É–≥–∏, –Ω–∞—á–∞–ª—å–Ω–∏–∫–∞ –∏ –¥–∞–∂–µ –±—ã–≤—à–µ–π üòé
–ü–µ—Ä–≤—ã–µ 3 –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω–æ üéÅ
        """,
        reply_markup=inline.generate_congrat_btn())


@router.message(Command('generate_congrat'))
async def generate_congrat(message: types.Message, state: FSMContext):
    print(f"{message.from_user.id}: generate_congrat")
    await state.clear()
    user_id = message.from_user.id
    log_action(user_id, "/generate_congrat")
    data_base.reg_user(user_id)

    sub_data = check_sub(user_id)
    if not sub_data["allow_generate"]:
        await message.answer(sub_data["message"], reply_markup=inline.see_sub_plans_btn())
    else:
        allowing_data = data_base.get_permition_by_last_request_time(message.from_user.id)
        if allowing_data["status"] == "not allowed" and allowing_data["message"] == "request frequency exceeded":
            generation_frequency_exceeded_message = await message.answer("–ü—Ä–µ–≤—ã—à–µ–Ω–∞ —á–∞—Å—Ç–æ—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ")
            await asyncio.sleep(5)
            await generation_frequency_exceeded_message.delete()
            await message.answer()
            return
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è",
            reply_markup=inline.congrat_type_btn()
        )

        await state.set_state(form_states.Congrat.congrat_type)


@router.message(Command('information'))
async def info(message: types.Message, state: FSMContext):
    await state.clear()
    user_id = message.from_user.id
    log_action(user_id, "/information")
    data_base.reg_user(user_id)

    info = data_base.get_info(user_id)

    info_user_id = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Ññ{info['user_id']}\n"
    info_reg_date = f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {info['reg_date'].date()}\n"
    info_subscription = f"–¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏: {sub_types[info['sub_type']]}\n"
    info_sub_expired = f"–ò—Å—Ç–µ–∫–∞–µ—Ç: {info['sub_expired'].date()}\n"
    info_available_tokens = f"–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {info['available_tokens']}"

    await message.answer(
        text="{}{}{}{}{}".format(
                                info_user_id,
                                info_reg_date,
                                info_subscription,
                                info_sub_expired,
                                info_available_tokens
                                )
    )


@router.message(Command("subscription"))
async def subscription(message: types.Message, state: FSMContext):
    log_action(message.from_user.id, "/subscription")
    await message.answer("""
üéâ –•–æ—á–µ—à—å –±–æ–ª—å—à–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π –∏ –ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ?
–ü–æ–¥–ø–∏—à–∏—Å—å –∏ –ø–æ–ª—É—á–∏ –¥–æ—Å—Ç—É–ø –∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—è–º –Ω–∞ –±–∞–∑–µ GPT-4.1 ‚Äî –±–æ–ª–µ–µ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–π –∏ –¥—É—à–µ–≤–Ω–æ–π –º–æ–¥–µ–ª–∏!

üí° –ë–µ—Å–ø–ª–∞—Ç–Ω–æ
‚Äî 3 –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è
‚Äî –ù–∞ –±–∞–∑–µ GPT-3.5
‚Äî –û—Ç–ª–∏—á–Ω–æ, —á—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å

üíé –ë–∞–∑–æ–≤–∞—è ‚Äî 99‚ÇΩ / –º–µ—Å
‚Äî 100 –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π
‚Äî –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è GPT-4.1
‚Äî –î–ª—è —Ä–µ–¥–∫–∏—Ö, –Ω–æ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π

üöÄ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è ‚Äî 149‚ÇΩ / –º–µ—Å
‚Äî 250 –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π
‚Äî –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è GPT-4.1
‚Äî –î–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã—Ö –∏–¥–µ–π

üëë –ì–æ–¥–æ–≤–∞—è ‚Äî 249‚ÇΩ / –≥–æ–¥
‚Äî 750 –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π –Ω–∞ –≤–µ—Å—å –≥–æ–¥
‚Äî –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è GPT-4.1
‚Äî –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤—ã–≥–æ–¥–∞!

üìå –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è —Å—Ä–∞–∑—É. –ì–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ —Å–≥–æ—Ä–∞—é—Ç –¥–æ –∫–æ–Ω—Ü–∞ —Å—Ä–æ–∫–∞.
""", reply_markup=inline.sub_plans_btn())


@router.message(Command('promocode'))
async def promocode(message: types.Message, state: FSMContext):
    await state.clear()
    user_id = message.from_user.id
    log_action(user_id, "/promocode")
    data_base.reg_user(user_id)
    await state.set_state(form_states.Congrat.promocode)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥")


@router.message(Command("awake"))
async def awake_inactive_users(message: types.Message):
    if not validators.user_is_admin(message.from_user.id):
        return
    log_action(message.from_user.id, "/awake")
    users = data_base.get_inactive_users()
    text = "üéâ –ü—Ä–∏–≤–µ—Ç! –¢—ã –¥–∞–≤–Ω–æ –Ω–µ –∑–∞—Ö–æ–¥–∏–ª. –ü–æ—Ä–∞ –±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ üòâ"
    await promotions.broadcast_message(message.bot, users, text, inline.generate_congrat_btn)


@router.message(Command("broadcast"))
async def broadcast(message: types.Message, state: FSMContext):
    if not validators.user_is_admin(message.from_user.id):
        return
    log_action(message.from_user.id, "/broadcast")
    data_base.reg_user(message.from_user.id)

    await state.set_state(form_states.Congrat.broadcast)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")


@router.message(Command(commands=["favourite", "favourites"]))
async def get_favourite(message: types.Message):
    print("fav")
    user_id = message.from_user.id
    log_action(user_id, "/favourite")

    fav_messages = data_base.get_favourite(user_id)
    print(fav_messages)
    if fav_messages == []:
        await message.answer(
            text="–£ –≤–∞—Å –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π"
        )
        return
    if len(fav_messages) == 1:
        await message.answer(
            text=fav_messages[0][1],
            reply_markup=inline.fav_mess_nav_btns(len(fav_messages), 0, fav_messages[0][0], first=True, last=True)
        )
    else:
        await message.answer(
            text=fav_messages[0][1],
            reply_markup=inline.fav_mess_nav_btns(len(fav_messages), 0, fav_messages[0][0], first=True)
        )


# async def fake_progress(message):
#     phrases = [
#         "‚úçÔ∏è –î—É–º–∞–µ–º –Ω–∞–¥ –∏–¥–µ–µ–π...",
#         "üí° –ü–æ–¥–±–∏—Ä–∞–µ–º —Å—Ç–∏–ª—å...",
#         "üìú –§–æ—Ä–º—É–ª–∏—Ä—É–µ–º –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ...",
#         "üéÅ –ó–∞–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—É—é —É–ø–∞–∫–æ–≤–∫—É...",
#         "‚ú® –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–º–Ω–æ–≥–æ –º–∞–≥–∏–∏..."
#     ]
#     while True:
#         for phrase in phrases:
#             try:
#                 await message.edit_text(phrase)
#                 await asyncio.sleep(random.uniform(1.2, 2.0))  # —Ä–∞–Ω–¥–æ–º–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
#             except Exception:
#                 return


async def gen_congrat(user_info, congrat_data, user_id):
    if user_info["sub_type"] == "free_sub":
        model = "gpt-3.5"
        result = AI_API.generate_congrat_gpt_3_5(congrat_data)
        if result["status"] == "error":
            if "unsupported_country_region_territory" in str(result["error"]):
                log_action(user_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {result['error']}")
                return {
                    "status": "error",
                    "error": "unsupported_country_region_territory"
                }
            else:
                log_action(user_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {result['error']}")
                return {
                    "status": "error",
                    "error": ""
                }
        prompt = result["prompt"]
        response = result["response"]
        session_id = result["session_id"]
        return {
            "status": "ok",
            "response": response,
            "prompt": prompt,
            "session_id": session_id,
            "model": model
        }
    else:
        model = "gpt-4.1"
        result = AI_API.generate_congrat_gpt_4_1(congrat_data)
        if result["status"] == "error":
            if "unsupported_country_region_territory" in str(result["error"]):
                log_action(user_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {result['error']}")
                return {
                    "status": "error",
                    "error": "unsupported_country_region_territory"
                }
            else:
                log_action(user_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {result['error']}")
                return {
                    "status": "error",
                    "error": ""
                }
        prompt = result["prompt"]
        response = result["response"]
        session_id = result["session_id"]
        return {
            "status": "ok",
            "response": response,
            "prompt": prompt,
            "session_id": session_id,
            "model": model
        }


@router.message(F.text)
async def recipient_name(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_info = data_base.get_info(user_id)
    message_text = message.text
    current_state = await state.get_state()
    if "<script>" in message_text or any(x in message_text for x in ["<", ">", "{", "}"]) and current_state != 'Congrat:broadcast':
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã.")
        return
    if len(message_text) > 50 and current_state != 'Congrat:broadcast':
        print(current_state)
        await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ(–±–æ–ª–µ–µ 50 —Å–∏–º–≤–æ–ª–æ–≤)")
        return
    if len(message_text.strip()) == 0:
        message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        return
    if validators.contains_bad_symbols(message.text) and current_state != 'Congrat:broadcast':
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ emoji, HTML-—Ç–µ–≥–∏ –∏–ª–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã.")
        return

    if current_state == 'Congrat:reciever_name':
        if not message_text.replace(" ", "").isalpha():
            await message.answer("–ò–º—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã.")
            return
        allowing_data = data_base.get_permition_by_last_request_time(message.from_user.id)
        if allowing_data["status"] == "not allowed" and allowing_data["message"] == "request frequency exceeded":
            await message.answer("–ü—Ä–µ–≤—ã—à–µ–Ω–∞ —á–∞—Å—Ç–æ—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ")
            return
        answer_generation = await message.answer("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è...")
        log_action(user_id, f"–í—ã–±—Ä–∞–ª –ø–æ–ª—É—á–∞—Ç–µ–ª—è: {message.text}")
        await state.update_data(reciever_name=message.text)
        congrat_data = await state.get_data()
        print(f"{message.from_user.id}: {congrat_data}")

        for i in range(5):
            response = await gen_congrat(user_info, congrat_data, user_id)
            if response["status"] == "error":
                if response["error"] == "unsupported_country_region_territory":
                    if i == 4:
                        await answer_generation.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ú—ã —É–∂–µ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º")
                        return
                    else:
                        await asyncio.sleep(5)
                else:
                    await answer_generation.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ú—ã —É–∂–µ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º")
                    return
            else:
                break

        data_base.log_generation(
            user_id,
            response["prompt"],
            response["response"],
            response["session_id"],
            response["model"])
        data_base.write_off_a_token(user_id)
        await answer_generation.edit_text(
            text=response["response"],
            reply_markup=inline.regenerate_btn_not_fav(response["session_id"]))
        log_action(user_id, f"–ü–æ–ª—É—á–∏–ª –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ {response['session_id']}")
        data_base.set_last_request_time(user_id)
        gen_count = data_base.send_mess_after_first_second_gen(user_id)
        if gen_count == '1':
            await message.answer(
                """
                üéâ –ì–æ—Ç–æ–≤–æ! –ù–∞–¥–µ—é—Å—å, –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å.\n
                –û—Å—Ç–∞–ª–æ—Å—å: 2 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.
                """)
        elif gen_count == '2':
            await message.answer(
                """
                üéâ –ì–æ—Ç–æ–≤–æ! –ù–∞–¥–µ—é—Å—å, –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å.
                –û—Å—Ç–∞–ª–æ—Å—å: 1 –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è.
                """)
        elif gen_count == '3':
            await message.answer(
                """
                ‚õî –ë–æ–ª—å—à–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –Ω–µ—Ç.
                –•–æ—á–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å? –í–æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã üëá
                """, reply_markup=inline.sub_plans_btn())

    elif current_state == 'Congrat:promocode':
        promo = message.text
        log_action(user_id, f"–í–≤–µ–ª –ø—Ä–æ–º–æ–∫–æ–¥: {promo}")
        if promo in []:
            user_id = message.from_user.id
            data_base.set_subscription(user_id, "monthly")
            await message.answer("–ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–º–µ–Ω—ë–Ω")
            await state.clear()
        else:
            await message.answer("–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç")
            await state.clear()
    elif current_state == 'Congrat:achieve':
        log_action(user_id, f"–í–≤–µ–ª –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: {message.text}")
        await state.update_data(achieve=message.text)
        await state.set_state(form_states.Congrat.congrat_recipient_role)
        await message.answer(
                            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º—É –±—É–¥–µ—Ç –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ",
                            reply_markup=inline.congrat_recipient_role_btn()
        )
    elif current_state == 'Congrat:holiday':
        log_action(user_id, f"–í–≤–µ–ª –ø—Ä–∞–∑–¥–Ω–∏–∫: {message.text}")
        await state.update_data(holiday=message.text)
        await state.set_state(form_states.Congrat.congrat_recipient_role)
        await message.answer(
                            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º—É –±—É–¥–µ—Ç –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ",
                            reply_markup=inline.congrat_recipient_role_btn()
        )
    elif current_state == 'Congrat:anniversary':
        log_action(user_id, f"–í–≤–µ–ª –≥–æ–¥–æ–≤—â–∏–Ω—É: {message.text}")
        await state.update_data(anniversary=message.text)
        await state.set_state(form_states.Congrat.congrat_recipient_role)
        await message.answer(
                            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º—É –±—É–¥–µ—Ç –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ",
                            reply_markup=inline.congrat_recipient_role_btn()
        )
    elif current_state == 'Congrat:broadcast':
        await state.update_data(broadcast=message_text)
        await state.set_state(form_states.Congrat.confirm_broadcast)
        await message.answer("–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ?(–î–∞/–ù–µ—Ç)")
    elif current_state == 'Congrat:confirm_broadcast':
        if message_text == "–î–∞":
            users = data_base.get_all_users()
            data = await state.get_data()
            print(data)
            data = data["broadcast"]
            print(data)
            result = await promotions.broadcast_message(message.bot, users, data)
            await message.answer((
                f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {result['success']}\n"
                f"–ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {result['failed']}\n"
                f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏: {round(result['success'] / (result['success'] + result['failed']) * 100, 2)}%"))
            await state.clear()
        elif message_text == "–ù–µ—Ç":
            await state.clear()
            await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        else:
            await message.answer("–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ?(–î–∞/–ù–µ—Ç)")

    elif message.text.startswith("/daily_stat") and validators.user_is_admin(user_id):
        print(f"{user_id}:{str(message.text)[1:]}")
        await state.clear()
        try:
            date = message.text.split()[1]
        except IndexError:
            await message.answer("–ó–∞–ø—Ä–æ—Å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É /daily_stat –ì–ì–ì–ì-–ú–ú-–î–î")
            return
        if len(message.text.split()) != 2:
            await message.answer("–ó–∞–ø—Ä–æ—Å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É /daily_stat –ì–ì–ì–ì-–ú–ú-–î–î")
            return
        date = message.text.split()[1]
        if not validators.is_valid_date(date):
            await message.answer("–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –¥–∞—Ç–∞ –∏–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É /daily_stat –ì–ì–ì–ì-–ú–ú-–î–î")
            return
        date = date.split("-")
        date = datetime.date(int(date[0]), int(date[1]), int(date[2]))
        daily_info = data_base.get_daily_stat(date, validators.get_admins_ids())
        await message.answer((
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {daily_info['gen_count']}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ–∏–∑–≤–µ–¥—à–∏—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏—é: {daily_info['users_gen_count']}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {daily_info['newcomers_count']}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ reels: {daily_info['reels_newcomers_count']}\n"
        ))
    elif message.text.startswith("/monthly_stat") and validators.user_is_admin(message.from_user.id):
        user_id = message.from_user.id
        print(f"{user_id}:{str(message.text)[1:]}")
        await state.clear()
        try:
            date = message.text.split()[1]
        except IndexError:
            await message.answer("–ó–∞–ø—Ä–æ—Å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É /monthly_stat –ì–ì–ì–ì-–ú–ú")
            return
        if len(message.text.split()) != 2:
            await message.answer("–ó–∞–ø—Ä–æ—Å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É /monthly_stat –ì–ì–ì–ì-–ú–ú")
            return
        date = message.text.split()[1]
        date = date + "-01"
        if not validators.is_valid_date(date):
            await message.answer("–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –¥–∞—Ç–∞ –∏–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É /monthly_stat –ì–ì–ì–ì-–ú–ú")
            return
        date = date.split("-")
        date = datetime.date(int(date[0]), int(date[1]), int(date[2]))
        monthly_info = data_base.get_monthly_stat(date, validators.get_admins_ids())
        await message.answer((
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {monthly_info['gen_count']}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ–∏–∑–≤–µ–¥—à–∏—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏—é: {monthly_info['users_gen_count']}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {monthly_info['newcomers_count']}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ reels: {monthly_info['reels_newcomers_count']}\n"
        ))
    elif message.text.startswith("/graph_gens") and validators.user_is_admin(message.from_user.id):
        user_id = message.from_user.id
        print(f"{user_id}:{str(message.text)[1:]}")
        await state.clear()

        date_range = str(message.text).split()[1].split("=")

        start = datetime.date(
            int(date_range[0].split("-")[0]),
            int(date_range[0].split("-")[1]),
            int(date_range[0].split("-")[2])
            )
        end = datetime.date(
            int(date_range[1].split("-")[0]),
            int(date_range[1].split("-")[1]),
            int(date_range[1].split("-")[2])
            )

        graph = graphs.get_gens_graph(start, end)

        await message.answer(f"```\n{graph}\n```", parse_mode="Markdown")
        print(graph)

    elif message.text.startswith("/graph_users") and validators.user_is_admin(message.from_user.id):
        user_id = message.from_user.id
        print(f"{user_id}:{str(message.text)[1:]}")
        await state.clear()

        date_range = str(message.text).split()[1].split("=")

        start = datetime.date(
            int(date_range[0].split("-")[0]),
            int(date_range[0].split("-")[1]),
            int(date_range[0].split("-")[2])
            )
        end = datetime.date(
            int(date_range[1].split("-")[0]),
            int(date_range[1].split("-")[1]),
            int(date_range[1].split("-")[2])
            )

        graph = graphs.get_users_graph(start, end)

        await message.answer(f"```\n{graph}\n```", parse_mode="Markdown")
        print(graph)
    else:
        log_action(user_id, f"–°–æ–æ–±—â–µ–Ω–∏–µ –≤–Ω–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {message.text}")
        await state.clear()
        await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –≤–Ω–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")
        user_id = message.from_user.id
        data_base.reg_user(user_id)
